import{_ as i,c as a,o as n,aj as p}from"./chunks/framework.DbINzAG1.js";const o=JSON.parse('{"title":"系统部署","description":"","frontmatter":{},"headers":[],"relativePath":"open/guides/develop/系统部署.md","filePath":"open/guides/develop/系统部署.md","lastUpdated":1746454016000}'),l={name:"open/guides/develop/系统部署.md"};function e(h,s,t,k,d,r){return n(),a("div",null,s[0]||(s[0]=[p(`<h1 id="系统部署" tabindex="-1">系统部署 <a class="header-anchor" href="#系统部署">¶</a></h1><h2 id="后端构建" tabindex="-1">后端构建 <a class="header-anchor" href="#后端构建">¶</a></h2><blockquote><p>由于<code>DaxPay</code>基于<code>Bootx-Platform</code>进行开发的，<code>Bootx-Platform</code>后端是一个基于Spring Boot 3的脚手架，所以构建方式也跟普通的Spring Boot 项目基本相同。</p></blockquote><p>首先在项目中执行<code>mvn -B clean package -Dmaven.test.skip=true -Dmaven.javadoc.skip=true -Dmaven.gpg.skip</code>命令进行构建，</p><ul><li><code>-Dmaven.javadoc.skip=true</code>是跳过DOC文档相关的构造，可以加快构建的速度。</li><li><code>-Dmaven.test.skip=true</code>是跳过测试用例，可以加快构建的速度。</li><li><code>-Dmaven.gpg.skip</code>是跳过GPG签名加密插件的执行，只有<code>daxpay-open-sdk</code>模块在<code>install</code>时才会用到。</li></ul><p>构建执行完成后，到项目下<code>daxpay-open-server</code>模块下的target目录中找到<code>daxpay-server.jar</code>文件， 这个文件就是我们所需要的可执行Jar包。</p><h2 id="前端构建" tabindex="-1">前端构建 <a class="header-anchor" href="#前端构建">¶</a></h2><blockquote><p>由于<code>DaxPay</code>基于<code>Bootx-Platform</code>进行开发的，<code>Bootx-Platform</code>前端是一个Antd Vue 4组件库的Vue项目，所以构建方式就是标准的前端构建方式。</p></blockquote><p>Node版本需要大于等于<code>20.9.0</code>，包管理工具使用<code>pnpm</code>，版本需要大于等于<code>9.0.2</code>，构建完后的制品在<code>dist</code>文件夹下，</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 安装依赖</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 执行打包命令</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span></span></code></pre></div><h2 id="部署示例-前后端独立部署" tabindex="-1">部署示例(前后端独立部署) <a class="header-anchor" href="#部署示例-前后端独立部署">¶</a></h2><div class="tip custom-block"><p class="custom-block-title">提示</p><p>因为支付系统会涉及到一些三方支付网关的回调，以及例如微信授权域名、jsapi安全域名的限制，所以部署时，我们需要保证访问的入口地址尽量少，从而尽量少的占用如微信公众平台各类域名的占用。 这样就需要我们对项目进行一些配置，从而实现这些诉求。</p></div><h3 id="域名分配" tabindex="-1">域名分配 <a class="header-anchor" href="#域名分配">¶</a></h3><blockquote><p>假定我们拥有一个域名<code>www.daxpay.com</code>，并且该域名已经备案，下面的配置是独立部署模式的配置示例：</p></blockquote><table tabindex="0"><thead><tr><th>项目</th><th>域名分配</th><th>说明</th></tr></thead><tbody><tr><td>server</td><td><a href="https://www.daxpay.com/server/" target="_blank" rel="noreferrer">https://www.daxpay.com/server/</a></td><td>后端独立部署类不同的机器样，通常也不会被直接被访问，所以做个请求转发即可满足回调和接口调用的需求</td></tr><tr><td>H5</td><td><a href="https://www.daxpay.com/h5/" target="_blank" rel="noreferrer">https://www.daxpay.com/h5/</a></td><td>H5手机端通常使用手机访问，同时在微信中的访问的话，需要占用微信授权域名和jsapi安全域名的数量，所以和PC前端放到了同一个域名下</td></tr><tr><td>PC</td><td><a href="https://www.daxpay.com/" target="_blank" rel="noreferrer">https://www.daxpay.com/</a></td><td>PC端是用户和管理员访问的入口，所以让其可以直接访问</td></tr></tbody></table><h3 id="移动端配置" tabindex="-1">移动端配置 <a class="header-anchor" href="#移动端配置">¶</a></h3><blockquote><p>分别提供了前端嵌入到后端中和独立部署两种模式，区别是网站的根目录和接口的前缀配置不同，下面的配置是独立部署模式的<code>.env.production</code>配置示例：</p></blockquote><div class="language-properties vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">properties</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 独立部署模式</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">VITE_PUBLIC_PATH</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> = /h5</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">## API 接口前缀</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">VITE_GLOB_API_URL_PREFIX</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=/server</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 是否删除console</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">VITE_DROP_CONSOLE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=true</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 虚拟控制台</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">VITE_V_CONSOLE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=false</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 是否启用gzip压缩或brotli压缩, 可选: gzip | brotli | none, 如果你需要多种形式，你可以用&#39;,&#39;来分隔</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">VITE_BUILD_COMPRESS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;none&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 使用压缩时是否删除原始文件，默认为false</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">VITE_BUILD_COMPRESS_DELETE_ORIGIN_FILE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=false</span></span></code></pre></div><h3 id="pc端配置" tabindex="-1">PC端配置 <a class="header-anchor" href="#pc端配置">¶</a></h3><blockquote><p>分别提供了前端嵌入到后端中和独立部署两种模式，区别是网站的根目录和接口的前缀配置不同，下面的配置是独立部署模式的<code>.env.production</code>配置示例：</p></blockquote><div class="language-properties vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">properties</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 名称 不可为空</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">VITE_GLOB_APP_TITLE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=DaxPay服务端</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 独立部署模式</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">VITE_PUBLIC_PATH</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=/</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># API 接口前缀</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">VITE_GLOB_API_URL_PREFIX</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=/server</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 是否启用gzip压缩或brotli压缩, 可选: gzip | brotli | none, 如果你需要多种形式，你可以用&#39;,&#39;来分隔</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">VITE_BUILD_COMPRESS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;none&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 接口地址</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">VITE_GLOB_API_URL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 终端类型</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">VITE_GLOB_APP_CLIENT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=dax-pay</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 超时时间</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">VITE_GLOB_API_TIMEOUT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=30000</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 是否开启打包分析</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">VITE_ENABLE_ANALYZE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=false</span></span></code></pre></div><h3 id="nginx配置" tabindex="-1">Nginx配置 <a class="header-anchor" href="#nginx配置">¶</a></h3><blockquote><p>此处前端的静态文件，为了方便部署，我们分别放在了两个目录下<code>web</code>和<code>h5</code>。项目启用了HTTPS，具体配置过程请自行查阅资料，静态文件的分布以及转发部分配置如下:</p></blockquote><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 后端服务请求转发, </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">location</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /server/</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    proxy_set_header</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Host</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $host; </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    proxy_set_header</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> X-Real-IP</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $remote_addr; </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    proxy_set_header</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> X-Forwarded-For</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $proxy_add_x_forwarded_for; </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    proxy_redirect</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    proxy_buffering</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # websocket协议升级</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    proxy_set_header</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Upgrade</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $http_upgrade;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    proxy_set_header</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Connection</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;upgrade&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # 后端地址</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    proxy_pass</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> http://127.0.0.1:9999/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 将根路径映射到web前端</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">location</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # PC前端静态文件所在的路径</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    alias</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /www/sites/www.daxpay.com/index/web/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    try_files</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $uri $uri</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /index.html</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 将h5路径映射到h5前端</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">location</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /h5/</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # h5前端静态文件所在的路径</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    alias</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /www/sites/www.daxpay.com/index/h5/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    try_files</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $uri $uri</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /h5/index.html</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="部署示例-前端嵌入在后端中" tabindex="-1">部署示例(前端嵌入在后端中) <a class="header-anchor" href="#部署示例-前端嵌入在后端中">¶</a></h2><div class="tip custom-block"><p class="custom-block-title">提示</p><p><strong>不再推荐新手使用，新手推荐直接使用Docker一键部署模式，水平足够的在特殊场景下可以使用嵌入式方式，其中上传文件的处理不额外说明，清自行处理</strong>， 有时候部署时不方便安装Nginx，又或者客户技术水平有限，只会简单这java启停命令，所以将前端嵌入在后端中，这样可以减少部署的复杂度。只需要启动起来后端即可。</p></div><h3 id="pc配置" tabindex="-1">PC配置 <a class="header-anchor" href="#pc配置">¶</a></h3><blockquote><p>PC端访问是通过二级目录进行访问的，所以打包时需要修改即可<code>发布路径</code>和<code>接口前缀</code>两项参数，然后进行正常构建即可。</p></blockquote><div class="language-properties vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">properties</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 名称 不可为空</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">VITE_GLOB_APP_TITLE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=DaxPay服务端</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 嵌入式模式 与后端部署在一起</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">VITE_PUBLIC_PATH</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=/web</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># API 接口前缀</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">VITE_GLOB_API_URL_PREFIX</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 是否启用gzip压缩或brotli压缩, 可选: gzip | brotli | none, 如果你需要多种形式，你可以用&#39;,&#39;来分隔</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">VITE_BUILD_COMPRESS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;none&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 接口地址</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">VITE_GLOB_API_URL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 终端类型</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">VITE_GLOB_APP_CLIENT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=dax-pay</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 超时时间</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">VITE_GLOB_API_TIMEOUT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=30000</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 是否开启打包分析</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">VITE_ENABLE_ANALYZE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=false</span></span></code></pre></div><h3 id="h5配置" tabindex="-1">H5配置 <a class="header-anchor" href="#h5配置">¶</a></h3><blockquote><p>H5端访问是通过二级目录进行访问的，所以打包时需要修改即可<code>发布路径</code>和<code>接口前缀</code>两项参数，然后进行正常构建即可。</p></blockquote><div class="language-properties vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">properties</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 嵌入式模式 与后端部署在一起</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#VITE_PUBLIC_PATH=/h5</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># API 接口前缀</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#VITE_GLOB_API_URL_PREFIX=</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 是否删除console</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">VITE_DROP_CONSOLE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=true</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 虚拟控制台</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">VITE_V_CONSOLE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=false</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 是否启用gzip压缩或brotli压缩, 可选: gzip | brotli | none, 如果你需要多种形式，你可以用&#39;,&#39;来分隔</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">VITE_BUILD_COMPRESS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;none&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 使用压缩时是否删除原始文件，默认为false</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">VITE_BUILD_COMPRESS_DELETE_ORIGIN_FILE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=false</span></span></code></pre></div><h3 id="后端配置" tabindex="-1">后端配置 <a class="header-anchor" href="#后端配置">¶</a></h3><blockquote><p>默认访问时需要添加上前端所在的<code>目录+index.html</code>，这样用起来会稍显繁琐，同时前端使用<code>history</code>路由模式， 直接访问会出现404，导致一些页面没办法被访问，如微信授权重定向页面，所以系统内置了转发控制器，见<code>Front*</code>相关的几个类。</p></blockquote><ol><li>在后端项目中resources目录下创建static目录</li><li>然后在<code>static</code>目录文件夹下创建<code>h5</code>和<code>web</code>文件夹，用于分别存放前端打包后的静态文件。</li><li>将PC端打包的静态文件拷贝到web目录下，H5端打包的静态文件拷贝到h5目录下。</li><li>对后端进行构建打包即可。</li></ol>`,35)]))}const E=i(l,[["render",e]]);export{o as __pageData,E as default};
