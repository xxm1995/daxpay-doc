import{_ as i,c as a,o as n,aj as e}from"./chunks/framework.DbINzAG1.js";const c=JSON.parse('{"title":"系统部署","description":"","frontmatter":{},"headers":[],"relativePath":"multi/guides/develop/系统部署.md","filePath":"multi/guides/develop/系统部署.md","lastUpdated":1744281799000}'),l={name:"multi/guides/develop/系统部署.md"};function p(h,s,t,k,d,r){return n(),a("div",null,s[0]||(s[0]=[e(`<h1 id="系统部署" tabindex="-1">系统部署 <a class="header-anchor" href="#系统部署">¶</a></h1><h2 id="后端构建" tabindex="-1">后端构建 <a class="header-anchor" href="#后端构建">¶</a></h2><blockquote><p>由于<code>DaxPay</code>基于<code>Bootx-Platform</code>进行开发的，<code>Bootx-Platform</code>后端是一个基于Spring Boot 3的脚手架，所以构建方式也跟普通的Spring Boot 项目基本相同。</p></blockquote><p>首先在项目中执行<code>mvn -B clean package -Dmaven.test.skip=true -Dmaven.javadoc.skip=true -Dmaven.gpg.skip</code>命令进行构建，</p><ul><li><code>-Dmaven.javadoc.skip=true</code>是跳过DOC文档相关的构造，可以加快构建的速度。</li><li><code>-Dmaven.test.skip=true</code>是跳过测试用例，可以加快构建的速度。</li><li><code>-Dmaven.gpg.skip</code>是跳过GPG签名加密插件的执行，只有<code>daxpay-single-sdk</code>模块在<code>install</code>时才会用到。</li></ul><p>构建执行完成后，到项目下<code>daxpay-multi-client</code>下<code>daxpay-multi-client-union</code>模块的target目录中找到<code>daxpay-union.jar</code>文件， 这个文件就是我们所需要的可执行Jar包。</p><h2 id="前端构建" tabindex="-1">前端构建 <a class="header-anchor" href="#前端构建">¶</a></h2><blockquote><p>由于<code>DaxPay</code>基于Vite5.x +Antd Vue 4的Vue项目，所以构建方式就是标准的前端构建方式。</p></blockquote><h3 id="pc端" tabindex="-1">PC端 <a class="header-anchor" href="#pc端">¶</a></h3><blockquote><p>Node版本需要大于等于<code>18.12.0</code>，包管理工具使用<code>pnpm</code>，版本需要大于等于<code>9.0.2</code>，构建完后的制品在<code>dist</code>文件夹下，</p></blockquote><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 安装依赖</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 执行打包命令(运营端)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build:admin</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 执行打包命令(商户端)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build:merchant</span></span></code></pre></div><h3 id="支付网关端" tabindex="-1">支付网关端 <a class="header-anchor" href="#支付网关端">¶</a></h3><blockquote><p>Node版本需要大于等于<code>20.9.0</code>，包管理工具使用<code>pnpm</code>，版本需要大于等于<code>9.0.2</code>，构建完后的制品在<code>dist</code>文件夹下，</p></blockquote><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 安装依赖</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 执行打包命令</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span></span></code></pre></div><h2 id="部署示例-前后端独立部署" tabindex="-1">部署示例(前后端独立部署) <a class="header-anchor" href="#部署示例-前后端独立部署">¶</a></h2><h3 id="nginx配置" tabindex="-1">Nginx配置 <a class="header-anchor" href="#nginx配置">¶</a></h3><blockquote><p>此处前端的Nginx配置文件示例，包含接口转发的配置。项目启用了HTTPS，具体配置过程请自行查阅资料，配置文件示例如下:</p></blockquote><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">server</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    listen</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 80</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    server_name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> web.daxpay.cn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    index</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> index.html</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> index.htm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> default.htm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> default.html</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    root</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /www/wwwroot/files</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # 用于配合 History 路由模式使用</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    try_files</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $uri $uri</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /index.html</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # 代理接口地址</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    location</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /server/</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        proxy_set_header</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Host</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $host; </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        proxy_set_header</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> X-Real-IP</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $remote_addr; </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        proxy_set_header</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> X-Forwarded-For</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $proxy_add_x_forwarded_for; </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        proxy_redirect</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        proxy_buffering</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        # websocket协议升级</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        proxy_set_header</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Upgrade</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $http_upgrade;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        proxy_set_header</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Connection</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;upgrade&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        # 后端地址</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        proxy_pass</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> http://127.0.0.1:9999/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,18)]))}const F=i(l,[["render",p]]);export{c as __pageData,F as default};
