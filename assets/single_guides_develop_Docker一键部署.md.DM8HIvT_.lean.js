import{_ as i,c as a,a6 as e,o as n}from"./chunks/framework.dnLRFVS3.js";const c=JSON.parse('{"title":"Docker一键部署","description":"","frontmatter":{},"headers":[],"relativePath":"single/guides/develop/Docker一键部署.md","filePath":"single/guides/develop/Docker一键部署.md","lastUpdated":1744201520000}'),l={name:"single/guides/develop/Docker一键部署.md"};function p(h,s,t,k,d,o){return n(),a("div",null,s[0]||(s[0]=[e(`<h1 id="docker一键部署" tabindex="-1">Docker一键部署 <a class="header-anchor" href="#docker一键部署">¶</a></h1><div class="info custom-block"><p class="custom-block-title">INFO</p><p>Docker方式用于快速体验本项目, 默认使用MySQL数据库. 各方面配置都未经过调优处理, 如果用于生产需要自行根据源码进行构建和配置.</p></div><h2 id="docker-compose部署" tabindex="-1">Docker-Compose部署 <a class="header-anchor" href="#docker-compose部署">¶</a></h2><blockquote><p>需要自己准备<code>MySQL</code>数据库和<code>Redis</code>，将数据脚本进行导入，注意数据库开启忽略大小写。然后在<code>docker-compose.yml</code>编排文件中<code>environment</code>进行填写。</p></blockquote><h3 id="部署前准备" tabindex="-1">部署前准备 <a class="header-anchor" href="#部署前准备">¶</a></h3><blockquote><p>需要在机器上提前安装好<code>docker</code>和<code>docker-compose</code>, 然后准备好MySQL和Redis实例. 然后复制下面的内容粘贴到文本编辑器中, 保存为<code>docker-compose.yml</code>文件, 将文件上传到机器中.</p></blockquote><blockquote><p>项目默认端口为9999, 可以通过<code>docker-compose.yml</code>文件中的<code>ports</code>进行端口映射配置相进行修改.</p></blockquote><blockquote><p>当网络模式为bridge时需要配置端口映射, 此时数据库和redis配置的地址将不可以为<code>localhost</code>或<code>127.0.0.1</code></p></blockquote><p><strong>编排文件</strong></p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">version</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;3&#39;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">services</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  daxpay-single</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # 使用时可以限定具体的版本, 如果因为网络问题无法下载, 可以使用阿里云加速地址: registry.cn-beijing.aliyuncs.com/daxpay/daxpay-single:latest</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    image</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">daxpay/daxpay-single:latest</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    restart</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">always</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # window上不支持host网络模式, 需要更改为 bridge 网络模式, 然后走端口映射</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    network_mode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">host</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # 如果不可以使用host网络模式时使用这个, 此时数据库相关的连接地址将不可以使用 127.0.0.1</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#    ports:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      # 端口映射 外部端口:容器端口</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#      - &quot;9999:9999&quot;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # 读取外部化配置文件(根据实际服务器环境做修改), 宿主机目录:容器目录</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    volumes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      # 日志</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">./data/logs/:/logs</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      # 上传文件目录</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">./data/files/:/data/files</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    environment</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      # mysql数据库连接地址</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">MYSQL_URL=jdbc:mysql://127.0.0.1:3306/dax-pay-single?serverTimezone=GMT%2B8&amp;characterEncoding=utf8&amp;allowMultiQueries=true&amp;useSSL=false&amp;nullCatalogMeansCurrent=true&amp;allowPublicKeyRetrieval=true</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      # mysql数据库账号</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">MYSQL_USERNAME=root</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      # mysql数据库密码</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">MYSQL_PASSWORD=root</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      # Redis 连接地址</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">REDIS_HOST=127.0.0.1</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      # Redis 端口</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">REDIS_PORT=6379</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      # Redis 库号</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">REDIS_DATABASE=5</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      # Redis 密码, 如果不设置密码则留空</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">REDIS_PASSWORD=daxpay</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      # 是否关闭swagger接口</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">KNIFE4J_PRODUCTION=false</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      # 是否启用超级管理员登录, 正式环境不要开启</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">DAXPAY_ENABLE_ADMIN=true</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      # 用户管理列表中是否显示超级管理员, 正式环境不要开启</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">DAXPAY_ADMIN-IN-LIST=true</span></span></code></pre></div><h3 id="部署" tabindex="-1">部署 <a class="header-anchor" href="#部署">¶</a></h3><blockquote><p>在<code>docker-compose.yml</code>文件所在的目录下执行 <code>docker compose up -d</code>或者 <code>docker-compose up -d</code>命令启动容器.</p></blockquote><blockquote><p>可以同时使用<code>docker compose logs -f</code> 或 <code>docker-compose logs -f</code> 命令来查看容器日志. 出现如下内容说明项目启动成功.</p></blockquote><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">2024-12-06</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 14:13:403</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> INFO</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [] main - org.dromara.daxpay.DaxpayServer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">daxpay-sigle-1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ----------------------------------------------------------</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">daxpay-sigle-1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">     应用</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;dax-pay-server&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 运行成功!</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">daxpay-sigle-1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">     Swagger文档:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">              http://172.23.0.2:9999/doc.html</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">daxpay-sigle-1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">     Swagger文档:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">              http://127.0.0.1:9999/doc.html</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">daxpay-sigle-1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ----------------------------------------------------------</span></span></code></pre></div><blockquote><p>容器部署后, 系统运行中所上传文件默认存放在<code>docker-compose.yml</code>文件所在目录的<code>/data/files/</code>下.</p></blockquote><blockquote><p>容器部署后, 系统运行中所产生的日志文件默认存放在<code>docker-compose.yml</code>文件所在目录<code>/data/log/</code>下.</p></blockquote><h3 id="部署后配置" tabindex="-1">部署后配置 <a class="header-anchor" href="#部署后配置">¶</a></h3><blockquote><p>推荐使用Nginx对外网进行映射, 这样可以避免端口暴露的问题. 也方便接收支付回调消息通知.</p></blockquote><h4 id="访问地址" tabindex="-1">访问地址 <a class="header-anchor" href="#访问地址">¶</a></h4><p>部署后可以通过下面等个地址访问项目中的内容:</p><ul><li>web管理端: <a href="http://ip:9999/web/" target="_blank" rel="noreferrer">http://ip:9999/web/</a></li><li>H5移动端: <a href="http://ip:9999/h5/" target="_blank" rel="noreferrer">http://ip:9999/h5/</a></li><li>接口文档: <a href="http://ip:9999/doc.html" target="_blank" rel="noreferrer">http://ip:9999/doc.html</a></li><li>文件访问目录: <a href="http://ip:9999/storage/" target="_blank" rel="noreferrer">http://ip:9999/storage/</a></li></ul><h4 id="平台配置" tabindex="-1">平台配置 <a class="header-anchor" href="#平台配置">¶</a></h4><p>所在位置 <code>支付配置 -&gt; 基础配置 -&gt; 平台配置</code> 需要根据当前机器的访问地址和暴露的端口号进行配置, 如果进行映射转发, 需要根据映射情况进行配置:</p><ul><li>网关服务地址: 用于接收通知回调消息的地址, 需要修改为为<code>http://ip:端口号</code> 或映射转发后的地址</li><li>网关H5端地址: 用于跳转H5支付页面的地址, 主要为各类收单页, 需要修改为为<code>http://ip:端口号/h5</code> 或映射转发后的地址</li><li>网关PC端地址: 后台管理系统的访问地址, 也包括PC收银台地址, 需要修改为为<code>http://ip:端口号/web</code> 或映射转发后的地址</li></ul><h4 id="存储平台配置" tabindex="-1">存储平台配置 <a class="header-anchor" href="#存储平台配置">¶</a></h4><p>存储平台配置, 默认使用本地文件存储, 需要根据当前机器的访问地址和暴露的端口号进行配置, 如果进行映射转发, 需要根据映射情况进行配置. 需要将 <code>本地存储</code> 方式设置为默认平台, 同时修改平台地址为 <code>http://ip:端口号/storage</code></p><h2 id="使用自带数据库和缓存" tabindex="-1">使用自带数据库和缓存 <a class="header-anchor" href="#使用自带数据库和缓存">¶</a></h2><blockquote><p>TODO 待补充</p></blockquote>`,28)]))}const g=i(l,[["render",p]]);export{c as __pageData,g as default};
